#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'linkeddata'
require 'json/ld'
require 'getoptlong'
require 'open-uri'

def run(input, options)
  reader_class = RDF::Reader.for(options[:input_format].to_sym)
  raise "Reader not found for #{options[:input_format]}" unless reader_class

  prefixes = {}
  start = Time.new
  num = 0
  r = reader_class.new(input, :base_uri => options[:base_uri], :strict => true)
  g = RDF::Graph.new << r
  num = g.count
  options[:output].puts g.dump(options[:output_format],
    :base_uri     => options[:base_uri],
    :vocab        => options[:vocab],
    :prefixes     => r.prefixes,
    :canonicalize => options[:normalize])
  puts
  secs = Time.new - start
  puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
rescue
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  STDERR.puts("Error in #{fname}")
  raise
end

options = {
  :validate      => false,
  :strict        => true,
  :normalize     => false,
  :output        => STDOUT,
  :output_format => :ntriples,
  :input_format  => :ld,
  :vocab         => nil,
  :base_uri      => nil,
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--input-format", GetoptLong::REQUIRED_ARGUMENT],
  ["--normalize", GetoptLong::NO_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--parse-only", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'          then ::JSON::LD::debug = true
  when '--execute'      then input = arg
  when '--format'       then options[:output_format] = arg.to_sym
  when '--input-format' then options[:input_format] = arg.to_sym
  when '--normalize'    then options[:normalize] = true
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--parse-only'   then options[:parse_only] = true
  when '--quiet'        then options[:quiet] = true
  when '--uri'          then options[:base_uri] = arg
  when '--verbose'      then $verbose = true
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), options)
else
  ARGV.each do |test_file|
    run(Kernel.open(test_file), options)
  end
end
puts
