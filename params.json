{"name":"Json-ld","tagline":"Ruby JSON-LD reader/writer for RDF.rb","body":"# JSON-LD reader/writer\r\n\r\n[JSON-LD][] reader/writer for [RDF.rb][RDF.rb] and fully conforming [JSON-LD API][] processor. Additionally this gem implements [JSON-LD Framing][].\r\n\r\n[![Gem Version](https://badge.fury.io/rb/json-ld.png)](http://badge.fury.io/rb/json-ld)\r\n[![Build Status](https://secure.travis-ci.org/ruby-rdf/json-ld.png?branch=master)](http://travis-ci.org/ruby-rdf/json-ld)\r\n\r\n## Features\r\n\r\nJSON::LD parses and serializes [JSON-LD][] into [RDF][] and implements expansion, compaction and framing API interfaces.\r\n\r\nInstall with `gem install json-ld`\r\n\r\n## Examples\r\n\r\n    require 'rubygems'\r\n    require 'json/ld'\r\n\r\n### Expand a Document\r\n\r\n    input = JSON.parse %({\r\n      \"@context\": {\r\n        \"name\": \"http://xmlns.com/foaf/0.1/name\",\r\n        \"homepage\": \"http://xmlns.com/foaf/0.1/homepage\",\r\n        \"avatar\": \"http://xmlns.com/foaf/0.1/avatar\"\r\n      },\r\n      \"name\": \"Manu Sporny\",\r\n      \"homepage\": \"http://manu.sporny.org/\",\r\n      \"avatar\": \"http://twitter.com/account/profile_image/manusporny\"\r\n    })\r\n    JSON::LD::API.expand(input) =>\r\n    \r\n    [{\r\n        \"http://xmlns.com/foaf/0.1/name\": [\"Manu Sporny\"],\r\n        \"http://xmlns.com/foaf/0.1/homepage\": [\"http://manu.sporny.org/\"],\r\n        \"http://xmlns.com/foaf/0.1/avatar\": [\"http://twitter.com/account/profile_image/manusporny\"]\r\n    }]\r\n\r\n### Compact a Document\r\n\r\n    input = JSON.parse %([{\r\n        \"http://xmlns.com/foaf/0.1/name\": [\"Manu Sporny\"],\r\n        \"http://xmlns.com/foaf/0.1/homepage\": [{\"@id\": \"http://manu.sporny.org/\"}],\r\n        \"http://xmlns.com/foaf/0.1/avatar\": [{\"@id\": \"http://twitter.com/account/profile_image/manusporny\"}]\r\n    }])\r\n    \r\n    context = JSON.parse(%({\r\n      \"@context\": {\r\n        \"name\": \"http://xmlns.com/foaf/0.1/name\",\r\n        \"homepage\": {\"@id\": \"http://xmlns.com/foaf/0.1/homepage\", \"@type\": \"@id\"},\r\n        \"avatar\": {\"@id\": \"http://xmlns.com/foaf/0.1/avatar\", \"@type\": \"@id\"}\r\n      }\r\n    }))['@context']\r\n    \r\n    JSON::LD::API.compact(input, context) =>\r\n    {\r\n        \"@context\": {\r\n          \"name\": \"http://xmlns.com/foaf/0.1/name\",\r\n          \"homepage\": {\"@id\": \"http://xmlns.com/foaf/0.1/homepage\", \"@type\": \"@id\"},\r\n          \"avatar\": {\"@id\": \"http://xmlns.com/foaf/0.1/avatar\", \"@type\": \"@id\"}\r\n        },\r\n        \"avatar\": \"http://twitter.com/account/profile_image/manusporny\",\r\n        \"homepage\": \"http://manu.sporny.org/\",\r\n        \"name\": \"Manu Sporny\"\r\n    }\r\n\r\n### Frame a Document\r\n\r\n    input = JSON.parse %({\r\n      \"@context\": {\r\n        \"Book\":         \"http://example.org/vocab#Book\",\r\n        \"Chapter\":      \"http://example.org/vocab#Chapter\",\r\n        \"contains\":     {\"@id\": \"http://example.org/vocab#contains\", \"@type\": \"@id\"},\r\n        \"creator\":      \"http://purl.org/dc/terms/creator\",\r\n        \"description\":  \"http://purl.org/dc/terms/description\",\r\n        \"Library\":      \"http://example.org/vocab#Library\",\r\n        \"title\":        \"http://purl.org/dc/terms/title\"\r\n      },\r\n      \"@graph\":\r\n      [{\r\n        \"@id\": \"http://example.com/library\",\r\n        \"@type\": \"Library\",\r\n        \"contains\": \"http://example.org/library/the-republic\"\r\n      },\r\n      {\r\n        \"@id\": \"http://example.org/library/the-republic\",\r\n        \"@type\": \"Book\",\r\n        \"creator\": \"Plato\",\r\n        \"title\": \"The Republic\",\r\n        \"contains\": \"http://example.org/library/the-republic#introduction\"\r\n      },\r\n      {\r\n        \"@id\": \"http://example.org/library/the-republic#introduction\",\r\n        \"@type\": \"Chapter\",\r\n        \"description\": \"An introductory chapter on The Republic.\",\r\n        \"title\": \"The Introduction\"\r\n      }]\r\n    })\r\n    \r\n    frame = JSON.parse %({\r\n      \"@context\": {\r\n        \"Book\":         \"http://example.org/vocab#Book\",\r\n        \"Chapter\":      \"http://example.org/vocab#Chapter\",\r\n        \"contains\":     \"http://example.org/vocab#contains\",\r\n        \"creator\":      \"http://purl.org/dc/terms/creator\",\r\n        \"description\":  \"http://purl.org/dc/terms/description\",\r\n        \"Library\":      \"http://example.org/vocab#Library\",\r\n        \"title\":        \"http://purl.org/dc/terms/title\"\r\n      },\r\n      \"@type\": \"Library\",\r\n      \"contains\": {\r\n        \"@type\": \"Book\",\r\n        \"contains\": {\r\n          \"@type\": \"Chapter\"\r\n        }\r\n      }\r\n    })\r\n\r\n    JSON::LD::API.frame(input, frame) =>\r\n    {\r\n      \"@context\": {\r\n        \"Book\": \"http://example.org/vocab#Book\",\r\n        \"Chapter\": \"http://example.org/vocab#Chapter\",\r\n        \"contains\": \"http://example.org/vocab#contains\",\r\n        \"creator\": \"http://purl.org/dc/terms/creator\",\r\n        \"description\": \"http://purl.org/dc/terms/description\",\r\n        \"Library\": \"http://example.org/vocab#Library\",\r\n        \"title\": \"http://purl.org/dc/terms/title\"\r\n      },\r\n      \"@graph\": [\r\n        {\r\n          \"@id\": \"http://example.com/library\",\r\n          \"@type\": \"Library\",\r\n          \"contains\": {\r\n            \"@id\": \"http://example.org/library/the-republic\",\r\n            \"@type\": \"Book\",\r\n            \"contains\": {\r\n              \"@id\": \"http://example.org/library/the-republic#introduction\",\r\n              \"@type\": \"Chapter\",\r\n              \"description\": \"An introductory chapter on The Republic.\",\r\n              \"title\": \"The Introduction\"\r\n            },\r\n            \"creator\": \"Plato\",\r\n            \"title\": \"The Republic\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### Turn JSON-LD into RDF (Turtle)\r\n\r\n    input = JSON.parse %({\r\n      \"@context\": {\r\n        \"\":       \"http://manu.sporny.org/\",\r\n        \"foaf\":   \"http://xmlns.com/foaf/0.1/\"\r\n      },\r\n      \"@id\":       \"http://example.org/people#joebob\",\r\n      \"@type\":          \"foaf:Person\",\r\n      \"foaf:name\":      \"Joe Bob\",\r\n      \"foaf:nick\":      { \"@list\": [ \"joe\", \"bob\", \"jaybe\" ] }\r\n    })\r\n    \r\n    graph = RDF::Graph.new << JSON::LD::API.toRdf(input)\r\n\r\n    require 'rdf/turtle'\r\n    graph.dump(:ttl, :prefixes => {:foaf => \"http://xmlns.com/foaf/0.1/\"})\r\n    @prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n\r\n    <http://example.org/people#joebob> a foaf:Person;\r\n       foaf:name \"Joe Bob\";\r\n       foaf:nick (\"joe\" \"bob\" \"jaybe\") .\r\n\r\n### Turn RDF into JSON-LD\r\n\r\n    require 'rdf/turtle'\r\n    input = RDF::Graph.new << RDF::Turtle::Reader.new(%(\r\n      @prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n\r\n      <http://manu.sporny.org/#me> a foaf:Person;\r\n         foaf:knows [ a foaf:Person;\r\n           foaf:name \"Gregg Kellogg\"];\r\n         foaf:name \"Manu Sporny\" .\r\n    ))\r\n    \r\n    context = JSON.parse %({\r\n      \"@context\": {\r\n        \"\":       \"http://manu.sporny.org/\",\r\n        \"foaf\":   \"http://xmlns.com/foaf/0.1/\"\r\n      }\r\n    })\r\n\r\n    compacted = nil\r\n    JSON::LD::API::fromRdf(input) do |expanded|\r\n      compacted = JSON::LD::API.compact(expanded, context['@context'])\r\n    end\r\n    compacted =>\r\n      [\r\n        {\r\n          \"@id\": \"_:g70265766605380\",\r\n          \"@type\": [\"http://xmlns.com/foaf/0.1/Person\"],\r\n          \"http://xmlns.com/foaf/0.1/name\": [{\"@value\": \"Gregg Kellogg\"}]\r\n        },\r\n        {\r\n          \"@id\": \"http://manu.sporny.org/#me\",\r\n          \"@type\": [\"http://xmlns.com/foaf/0.1/Person\"],\r\n          \"http://xmlns.com/foaf/0.1/knows\": [{\"@id\": \"_:g70265766605380\"}],\r\n          \"http://xmlns.com/foaf/0.1/name\": [{\"@value\": \"Manu Sporny\"}]\r\n        }\r\n      ]\r\n\r\n## RDF Reader and Writer\r\n{JSON::LD} also acts as a normal RDF reader and writer, using the standard RDF.rb reader/writer interfaces:\r\n\r\n    graph = RDF::Graph.load(\"etc/doap.jsonld\", :format => :jsonld)\r\n    graph.dump(:jsonld, :standard_prefixes => true)\r\n\r\n`RDF::GRAPH#dump` can also take a `:context` option to use a separately defined context\r\n\r\n## Documentation\r\nFull documentation available on [RubyDoc](http://rubydoc.info/gems/json-ld/file/README.md)\r\n\r\n## Differences from [JSON-LD API][]\r\nThe specified JSON-LD API is based on a WebIDL definition implementing [Promises][] intended for use within a browser.\r\nThis version implements a more Ruby-like variation of this API without the use\r\nof promises or callback arguments, preferring Ruby blocks. All API methods\r\nexecute synchronously, so that the return from a method can typically be used as well as a block.\r\n\r\nNote, the API method signatures differed in versions before 1.0, in that they also had a callback parameter. And 1.0.6 has some other minor method signature differences than previous versions. This should be the only exception to the use of semantic versioning.\r\n\r\n### Principal Classes\r\n* {JSON::LD}\r\n  * {JSON::LD::API}\r\n  * {JSON::LD::Compact}\r\n  * {JSON::LD::Context}\r\n  * {JSON::LD::Format}\r\n  * {JSON::LD::Frame}\r\n  * {JSON::LD::FromRDF}\r\n  * {JSON::LD::Reader}\r\n  * {JSON::LD::ToRDF}\r\n  * {JSON::LD::Writer}\r\n\r\n## Dependencies\r\n* [Ruby](http://ruby-lang.org/) (>= 1.9.2)\r\n* [RDF.rb](http://rubygems.org/gems/rdf) (>= 1.0)\r\n* [JSON](https://rubygems.org/gems/json) (>= 1.5)\r\n\r\n## Installation\r\nThe recommended installation method is via [RubyGems](http://rubygems.org/).\r\nTo install the latest official release of the `JSON-LD` gem, do:\r\n\r\n    % [sudo] gem install json-ld\r\n\r\n## Download\r\nTo get a local working copy of the development repository, do:\r\n\r\n    % git clone git://github.com/ruby-rdf/json-ld.git\r\n\r\n## Mailing List\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\n## Author\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://kellogg-assoc.com/>\r\n\r\n## Contributing\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec`, `VERSION` or `AUTHORS` files. If you need to\r\n  change them, do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the corresponding\r\n  list in the the `README`. Alphabetical order applies.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\nLicense\r\n-------\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\n[Ruby]:             http://ruby-lang.org/\r\n[RDF]:              http://www.w3.org/RDF/\r\n[YARD]:             http://yardoc.org/\r\n[YARD-GS]:          http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:              http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n[RDF.rb]:           http://rubygems.org/gems/rdf\r\n[Backports]:        http://rubygems.org/gems/backports\r\n[JSON-LD]:          http://www.w3.org/TR/json-ld/ \"JSON-LD 1.0\"\r\n[JSON-LD API]:      http://www.w3.org/TR/json-ld-api/ \"JSON-LD 1.0 Processing Algorithms and API\"\r\n[JSON-LD Framing]:  http://json-ld.org/spec/latest/json-ld-framing/ \"JSON-LD Framing 1.0\"\r\n[Promises]:         http://dom.spec.whatwg.org/#promises\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}