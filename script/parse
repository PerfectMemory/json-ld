#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
begin
  require 'linkeddata'
rescue LoadError
end
require 'json/ld'
require 'getoptlong'
require 'open-uri'

def run(input, options)
  reader_class = RDF::Reader.for(options[:input_format].to_sym)
  raise "Reader not found for #{options[:input_format]}" unless reader_class

  prefixes = {}
  start = Time.new
  if options[:expand]
    output = JSON::LD::API.expand(input, options[:context], nil, options)
    secs = Time.new - start
    options[:output].puts output.to_json(JSON::LD::JSON_STATE)
    puts "Expanded in #{secs} seconds."
  elsif options[:compact]
    output = JSON::LD::API.compact(input, options[:context], nil, options)
    secs = Time.new - start
    options[:output].puts output.to_json(JSON::LD::JSON_STATE)
    puts "Compacted in #{secs} seconds."
  elsif options[:frame]
    output = JSON::LD::API.frame(input, options[:frame], nil, options)
    secs = Time.new - start
    options[:output].puts output.to_json(JSON::LD::JSON_STATE)
    puts "Framed in #{secs} seconds."
  else
    r = reader_class.new(input, options[:parser_options])
    g = RDF::Repository.new << r
    secs = Time.new - start
    num = g.count
    parser_options = options[:parser_options].merge(:prefixes => r.prefixes, :standard_prefixes => true)
    options[:output].puts g.dump(options[:output_format], parser_options)
    puts
    puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
  end
rescue
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  STDERR.puts("Error in #{fname}")
  raise
end

parser_options = {
  :base => "",
  :progress   => false,
  :validate => false,
  :strict => false,
}

options = {
  :parser_options => parser_options,
  :output        => STDOUT,
  :output_format => :turtle,
  :input_format  => :jsonld,
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--automatic", GetoptLong::NO_ARGUMENT],
  ["--compact", GetoptLong::NO_ARGUMENT],
  ["--context", GetoptLong::REQUIRED_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--expand", GetoptLong::NO_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--frame", GetoptLong::REQUIRED_ARGUMENT],
  ["--input-format", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--parse-only", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'          then parser_options[:debug] = ::JSON::LD::debug = true
  when '--compact'      then options[:compact] = true
  when '--context'      then options[:context] = arg
  when '--execute'      then input = arg
  when '--expand'       then options[:expand] = true
  when '--format'       then options[:output_format] = arg.to_sym
  when '--frame'        then options[:frame] = arg
  when '--input-format' then options[:input_format] = arg.to_sym
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--parse-only'   then options[:parse_only] = true
  when '--quiet'        then options[:quiet] = true
  when '--uri'          then parser_options[:base] = arg
  when '--verbose'      then $verbose = true
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), options)
else
  ARGV.each do |test_file|
    run(Kernel.open(test_file), options)
  end
end
puts
